import json
import requests
from google.cloud import storage
from datetime import datetime

# Function to download the JSON file from GCS
def download_json_from_gcs(bucket_name, json_file_path):
    try:
        # Initialize a storage client
        client = storage.Client()

        # Get the bucket
        bucket = client.bucket(bucket_name)

        # Get the blob (file) from the bucket
        blob = bucket.blob(json_file_path)

        # Download the contents of the blob as a string
        json_data = blob.download_as_text()

        # Parse the string as JSON
        json_content = json.loads(json_data)
        
        return json_content
    except Exception as e:
        print(f"Error downloading JSON from GCS: {e}")
        return None

# Custom function to format datetime to ISO 8601 format
def format_datetime_to_iso(datetime_str):
    try:
        # Attempt to parse different datetime formats
        # Adjust formats as needed based on the possible input formats
        for fmt in ('%Y-%m-%d %H:%M:%S', '%m/%d/%Y %H:%M:%S', '%d/%m/%Y %H:%M:%S', '%Y-%m-%dT%H:%M:%S'):
            try:
                dt = datetime.strptime(datetime_str, fmt)
                return dt.isoformat()
            except ValueError:
                continue
        
        # If no format matches, return the original string
        return datetime_str
    except Exception as e:
        print(f"Error formatting datetime: {e}")
        return datetime_str  # If error, return the original string
    
# Custom function to format date from 'DD/MM/YYYY' to 'YYYY-MM-DD'
def format_date_dd_mm_yyyy_to_yyyy_mm_dd(date_str):
    try:
        # Convert the string from 'DD/MM/YYYY' to 'YYYY-MM-DD' format
        return datetime.strptime(date_str, '%d/%m/%Y').strftime('%Y-%m-%d')
    except Exception as e:
        print(f"Error formatting date: {e}")
        return date_str  # If error, return the original string

def map_address_data(address_string):
    try:
        # Split the address by newline character
        address_parts = [part.strip() for part in address_string.split('\n')]
        
        # Check the last part for postcode
        postcode_pattern = r"[A-Z]{1,2}\d{1,2} ?\d[A-Z]{2}"
        postcode = ""
        town = ""
        
        if address_parts:
            last_part = address_parts[-1]
            if re.search(postcode_pattern, last_part):
                postcode = last_part
                # Town is the part before the postcode
                if len(address_parts) > 1:
                    town = address_parts[-2]  # second last part is the town
                else:
                    town = ""
        
        # Address lines
        address_line1 = address_parts[0] if len(address_parts) > 0 else ""
        address_line2 = address_parts[1] if len(address_parts) > 1 else ""
        address_line3 = address_parts[2] if len(address_parts) > 2 else ""

        # Map the address data
        mapped_address = {
            "AddressLine1": address_line1,
            "AddressLine2": address_line2,
            "AddressLine3": address_line3,
            "Town": town,
            "Postcode": postcode,
            "IsCurrentAddress": True, 
            "FromDate": "" 
        }

        return mapped_address

    except Exception as e:
        print(f"Error parsing address: {e}")
        return None

# Function to map extracted JSON data to the API request structure
def map_extracted_data_to_api_structure(extracted_data):
    try:
        # Format only the ProposalStartDate field using the custom date formatter
        proposal_start_date = extracted_data.get("ProposalStartDate", "")
        
        # Apply date formatting only if the date is present
        if proposal_start_date:
            proposal_start_date = format_date_dd_mm_yyyy_to_yyyy_mm_dd(proposal_start_date)
        
          # Format the CreditorMeetingDate using the custom datetime formatter
        creditor_meeting_date = extracted_data.get("CreditorMeetingDate", "")
        creditor_meeting_date = format_datetime_to_iso(creditor_meeting_date)
        
  # Extract and format addresses
        addresses = extracted_data.get("address", {}).get("mentionText", "")
        formatted_addresses = []
        if len(addresses) > 0:
            for address in addresses:
                mapped_address = map_address_data(address)
                if mapped_address:
                    formatted_addresses.append(mapped_address)


        # Handle numeric fields: Default to 0 if missing
        total_liabilities = extracted_data.get("TotalLiabilities", 0)
        numberOfAdultsLivingInHouseHold = extracted_data.get("NumberOfAdultsLivingInHouseHold", 0)
        numberOfCars = extracted_data.get("NumberOfCars", 0)

          # Mapping Expenditure - FixedCosts and FlexibleCosts
        expenditure = extracted_data.get("Expenditure", {})
        fixed_costs = expenditure.get("SFS", {}).get("FixedCosts", {})
        flexible_costs = expenditure.get("SFS", {}).get("FlexibleCosts", {})
        
        expenditure_mapped = {
            "Expenditure": {
                "SFS": {
                    "FixedCosts": {
                        "HomeContents": {
                            "Rent": fixed_costs.get("HomeContents", {}).get("Rent", 0),
                            "GroundRentServiceCharges": fixed_costs.get("HomeContents", {}).get("GroundRentServiceCharges", 0),
                            "Mortgage": fixed_costs.get("HomeContents", {}).get("Mortgage", 0),
                            "MortgageEndowment": fixed_costs.get("HomeContents", {}).get("MortgageEndowment", 0),
                            "SecuredLoans": fixed_costs.get("HomeContents", {}).get("SecuredLoans", 0),
                            "CouncilTaxRates": fixed_costs.get("HomeContents", {}).get("CouncilTaxRates", 0),
                            "ApplianceFurnitureRental": fixed_costs.get("HomeContents", {}).get("ApplianceFurnitureRental", 0),
                            "TVLicence": fixed_costs.get("HomeContents", {}).get("TVLicence", 0),
                            "OtherHomeContents": fixed_costs.get("HomeContents", {}).get("OtherHomeContents", 0)
                        },
                        "Utilities": {
                            "Gas": fixed_costs.get("Utilities", {}).get("Gas", 0),
                            "Electricity": fixed_costs.get("Utilities", {}).get("Electricity", 0),
                            "OtherUtilities": fixed_costs.get("Utilities", {}).get("OtherUtilities", 0),
                            "OtherUtilitiesExpenditure": fixed_costs.get("Utilities", {}).get("OtherUtilitiesExpenditure", 0)
                        },
                        "Water": {
                            "WaterSupply": fixed_costs.get("Water", {}).get("WaterSupply", 0),
                            "WaterWaste": fixed_costs.get("Water", {}).get("WaterWaste", 0)
                        },
                        "CareHealth": {
                            "ChildcareCosts": fixed_costs.get("CareHealth", {}).get("ChildcareCosts", 0),
                            "AdultCareCosts": fixed_costs.get("CareHealth", {}).get("AdultCareCosts", 0),
                            "ChildMaintenanceChildSupport": fixed_costs.get("CareHealth", {}).get("ChildMaintenanceChildSupport", 0),
                            "PrescriptionsMedicines": fixed_costs.get("CareHealth", {}).get("PrescriptionsMedicines", 0),
                            "DentistryOpticians": fixed_costs.get("CareHealth", {}).get("DentistryOpticians", 0),
                            "OtherCareHealth": fixed_costs.get("CareHealth", {}).get("OtherCareHealth", 0)
                        },
                        "TransportTravel": {
                            "PublicTransport": fixed_costs.get("TransportTravel", {}).get("PublicTransport", 0),
                            "HirePurchaseConditionalSaleVehicle": fixed_costs.get("TransportTravel", {}).get("HirePurchaseConditionalSaleVehicle", 0),
                            "CarInsurance": fixed_costs.get("TransportTravel", {}).get("CarInsurance", 0),
                            "RoadTax": fixed_costs.get("TransportTravel", {}).get("RoadTax", 0),
                            "MOTOngoingMaintenance": fixed_costs.get("TransportTravel", {}).get("MOTOngoingMaintenance", 0),
                            "BreakdownCover": fixed_costs.get("TransportTravel", {}).get("BreakdownCover", 0),
                            "FuelParkingTollRoadCharges": fixed_costs.get("TransportTravel", {}).get("FuelParkingTollRoadCharges", 0),
                            "OtherTransportTravel": fixed_costs.get("TransportTravel", {}).get("OtherTransportTravel", 0)
                        },
                        "School": {
                            "SchoolUniform": fixed_costs.get("School", {}).get("SchoolUniform", 0),
                            "AfterSchoolClubsSchoolTrips": fixed_costs.get("School", {}).get("AfterSchoolClubsSchoolTrips", 0),
                            "OtherSchool": fixed_costs.get("School", {}).get("OtherSchool", 0)
                        },
                        "PensionsInsurances": {
                            "PensionPayments": fixed_costs.get("PensionsInsurances", {}).get("PensionPayments", 0),
                            "LifeInsurance": fixed_costs.get("PensionsInsurances", {}).get("LifeInsurance", 0),
                            "MortgagePaymentProtectionInsurance": fixed_costs.get("PensionsInsurances", {}).get("MortgagePaymentProtectionInsurance", 0),
                            "BuildingsContentsInsurance": fixed_costs.get("PensionsInsurances", {}).get("BuildingsContentsInsurance", 0),
                            "HealthInsurance": fixed_costs.get("PensionsInsurances", {}).get("HealthInsurance", 0),
                            "OtherPensionsInsurances": fixed_costs.get("PensionsInsurances", {}).get("OtherPensionsInsurances", 0)
                        },
                        "Professional": {
                            "ProfessionalCourses": fixed_costs.get("Professional", {}).get("ProfessionalCourses", 0),
                            "UnionFees": fixed_costs.get("Professional", {}).get("UnionFees", 0),
                            "ProfessionalFees": fixed_costs.get("Professional", {}).get("ProfessionalFees", 0),
                            "OtherProfessional": fixed_costs.get("Professional", {}).get("OtherProfessional", 0)
                        },
                        "OtherEssential": {
                            "OtherEssentialCosts": fixed_costs.get("OtherEssential", {}).get("OtherEssentialCosts", 0)
                        }
                    },
                    "FlexibleCosts": {
                        "CommunicationsLeisure": {
                            "HomePhoneInternetTV": flexible_costs.get("CommunicationsLeisure", {}).get("HomePhoneInternetTV", 0),
                            "MobilePhone": flexible_costs.get("CommunicationsLeisure", {}).get("MobilePhone", 0),
                            "HobbiesLeisureSport": flexible_costs.get("CommunicationsLeisure", {}).get("HobbiesLeisureSport", 0),
                            "Gifts": flexible_costs.get("CommunicationsLeisure", {}).get("Gifts", 0),
                            "PocketMoney": flexible_costs.get("CommunicationsLeisure", {}).get("PocketMoney", 0),
                            "NewspapersMagazinesStationeryPostage": flexible_costs.get("CommunicationsLeisure", {}).get("NewspapersMagazinesStationeryPostage", 0),
                            "OtherCommunicationsLeisure": flexible_costs.get("CommunicationsLeisure", {}).get("OtherCommunicationsLeisure", 0),
                            "CommunicationsLeisureTotal": flexible_costs.get("CommunicationsLeisure", {}).get("CommunicationsLeisureTotal", 0)
                        },
                        "FoodHousekeeping": {
                            "Groceries": flexible_costs.get("FoodHousekeeping", {}).get("Groceries", 0),
                            "NappiesBabyItems": flexible_costs.get("FoodHousekeeping", {}).get("NappiesBabyItems", 0),
                            "SchoolWorkMeals": flexible_costs.get("FoodHousekeeping", {}).get("SchoolWorkMeals", 0),
                            "LaundryDryCleaning": flexible_costs.get("FoodHousekeeping", {}).get("LaundryDryCleaning", 0),
                            "Alcohol": flexible_costs.get("FoodHousekeeping", {}).get("Alcohol", 0),
                            "SmokingProducts": flexible_costs.get("FoodHousekeeping", {}).get("SmokingProducts", 0),
                            "VetBillsPetInsurance": flexible_costs.get("FoodHousekeeping", {}).get("VetBillsPetInsurance", 0),
                            "HouseRepairsMaintenance": flexible_costs.get("FoodHousekeeping", {}).get("HouseRepairsMaintenance", 0),
                            "OtherFoodHousekeeping": flexible_costs.get("FoodHousekeeping", {}).get("OtherFoodHousekeeping", 0),
                            "FoodHousekeepingTotal": flexible_costs.get("FoodHousekeeping", {}).get("FoodHousekeepingTotal", 0)
                        },
                        "PersonalCosts": {
                            "ClothingFootwear": flexible_costs.get("PersonalCosts", {}).get("ClothingFootwear", 0),
                            "NappiesBabyItems": flexible_costs.get("PersonalCosts", {}).get("NappiesBabyItems", 0),
                            "MedicalInsurancePrescriptions": flexible_costs.get("PersonalCosts", {}).get("MedicalInsurancePrescriptions", 0),
                            "Healthcare": flexible_costs.get("PersonalCosts", {}).get("Healthcare", 0),
                            "OtherPersonalCosts": flexible_costs.get("PersonalCosts", {}).get("OtherPersonalCosts", 0)
                        }
                    }
                }
            }
        }
        # Example mapping: Adjust this according to your specific API requirements
        api_mapped_data = {
            "CaseDetails": {
                "IPPractitionerForename": extracted_data.get("IPPractitionerForename"),
                "IPPractitionerSurname": extracted_data.get("IPPractitionerSurname"),
                "CourtName": extracted_data.get("CourtName"),
                "IPCaseNumber": extracted_data.get("IPCaseNumber"),
                "IVANumber": extracted_data.get("IVANumber", ""),
                "ProposalType": extracted_data.get("ProposalType", ""),
                "IsProtocolCompliant": extracted_data.get("IsProtocolCompliant", ""),
                "ProtocolCompliantException": extracted_data.get("ProtocolCompliantException", ""),
                "ProposalStartDate": proposal_start_date,  # Only this field is formatted
                "CreditorMeetingDate": creditor_meeting_date,
                "TotalLiabilities": total_liabilities,  # Numeric field, default to 0 if missing
                "NomineeReport": extracted_data.get("NomineeReport", ""),
                "IVAProposalComment": extracted_data.get("IVAProposalComment", ""),
                "ConsumerHistory": extracted_data.get("ConsumerHistory", "")
            },
             "ConsumerDetails": {
                "Salutation": extracted_data.get("Salutation", ""),
                "Forename": extracted_data.get("Forename", ""),
                "Surname": extracted_data.get("Surname", ""),
                "DateOfBirth": extracted_data.get("DateOfBirth", ""),
                "MaritalStatus": extracted_data.get("MaritalStatus", ""),
                "NumberOfAdultsLivingInHouseHold": numberOfAdultsLivingInHouseHold,
                "ResidentialStatus": extracted_data.get("ResidentialStatus", ""),
                "EmploymentStatus": extracted_data.get("EmploymentStatus", ""),
                "Employer": extracted_data.get("Employer", ""),
                "Occupation": extracted_data.get("Occupation", ""),
                "NumberOfCars": numberOfCars,
                "Addresses": formatted_addresses  # Include the formatted addresses here

                
             },
             "IncomeAndBenefits": {
                "Income": [
                    {
                        "Type": income.get("Type", ""),
                        "Source": income.get("Source", ""),
                        "Value": income.get("Value", 0.0),
                        "Comment": income.get("Comment", "")
                    } for income in extracted_data.get("Income", [])
                ],
                "Benefits": [
                    {
                        "Type": benefit.get("Type", ""),
                        "Source": benefit.get("Source", ""),
                        "Value": benefit.get("Value", 0.0),
                        "Comment": benefit.get("Comment", "")
                    } for benefit in extracted_data.get("Benefits", [])
                ]
            },
             "Expenditure": expenditure_mapped["Expenditure"],
             "Arrangements": {
        "ProposalValue": extracted_data.get("ProposalValue", 0.0),
        "ProposedBankruptcyDividend": extracted_data.get("ProposedBankruptcyDividend", 0.0),
        "ProposedIVADividend": extracted_data.get("ProposedIVADividend", 0.0),
        "TotalUnsecuredDebt": extracted_data.get("TotalUnsecuredDebt", 0.0),
        "FeesAndExpenses": {
            "NomineeFee": extracted_data.get("NomineeFee", 0.0),
            "SupervisorFee": extracted_data.get("SupervisorFee", 0.0),
            "IPDisbursements": [
                {
                    "Type": disbursement.get("Type", ""),
                    "Value": disbursement.get("Value", 0.0)
                } for disbursement in extracted_data.get("IPDisbursements", [])
            ]
        },
        "Contributions": {
            "IVADuration": extracted_data.get("IVADuration", 0),
            "ContributionItems": [
                {
                    "NumberOfContributions": item.get("NumberOfContributions", 0),
                    "Value": item.get("Value", 0.0),
                    "Frequency": item.get("Frequency", ""),
                    "Sequence": item.get("Sequence", 0)
                } for item in extracted_data.get("ContributionItems", [])
            ]
        }
    },
    "ConsumerAccounts": {
        "AssociatedValue": extracted_data.get("AssociatedValue", 0.0),
        "PreferentialValue": extracted_data.get("PreferentialValue", 0.0),
        "Accounts": [
            {
                "ProposalAmount": account.get("ProposalAmount", 0.0),
                "AccountReference": account.get("AccountReference", ""),
                "IPAccountIdentifier": account.get("IPAccountIdentifier", ""),
                "BrandName": account.get("BrandName", ""),
                "ProductType": account.get("ProductType", ""),
                "JointAccountFlag": account.get("JointAccountFlag", False)
            } for account in extracted_data.get("Accounts", [])
        ],
        "SecuredDebts": [
            {
                "Type": debt.get("Type", ""),
                "ValueRemaining": debt.get("ValueRemaining", 0.0),
                "MonthlyContribution": debt.get("MonthlyContribution", 0.0),
                "Comment": debt.get("Comment", "")
            } for debt in extracted_data.get("SecuredDebts", [])
        ]
    }

        }
        return api_mapped_data
    except Exception as e:
        print(f"Error mapping data: {e}")
        return None

# Function to post JSON data to the platform
def post_json_data(api_url, mapped_data):
    try:
        headers = {'Content-Type': 'application/json'}
        response = requests.post(api_url, json=mapped_data, headers=headers)

        if response.status_code == 201 or response.status_code == 200:
            print(f"Successfully posted JSON data. Response: {response.json()}")
        else:
            print(f"Failed to post JSON data. Status code: {response.status_code}, Response: {response.text}")
    except Exception as e:
        print(f"Error posting JSON data: {e}")

if __name__ == "__main__":
    # Google Cloud Storage bucket name and JSON file path
    bucket_name = 'your-gcs-bucket-name'
    json_file_path = 'folder-path/your-json-file.json'

    # Example platform API URL (replace with actual platform URL)
    api_url = 'https://example-platform.com/post-endpoint'

    # Step 1: Download JSON data from GCS
    extracted_data = download_json_from_gcs(bucket_name, json_file_path)

    if extracted_data:
        # Step 2: Map the extracted data to the API structure
        mapped_data = map_extracted_data_to_api_structure(extracted_data)
        
        if mapped_data:
            # Step 3: Post the mapped data to the platform
            post_json_data(api_url, mapped_data)
        else:
            print("Failed to map extracted data.")
    else:
        print("No JSON data to process.")
